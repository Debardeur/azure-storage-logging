# Copyright 2013-2015 Michiya Takahashi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
import string
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler
from socket import gethostname
from tempfile import mkstemp
from zipfile import ZIP_DEFLATED, ZipFile

from azure.storage.blob import BlobServiceClient
from azure.storage.blob._models import ContentSettings, BlobType

import logging

_PY3 = sys.version_info[0] == 3


def _formatName(name, params):
    if _PY3:
        # try all possible formattings
        name = string.Template(name).substitute(**params)
        name = name.format(**params)
    return name % params


class _BlobStorageFileHandler(object):

    def __init__(self,
                 azure_connection_string=None,
                 container='logs',
                 zip_compression=False,
                 azure_filename="logs.log"):
        # Set a default logger for the blob because it can polute our log trace
        blob_logger = logging.getLogger('blob_client')
        blob_logger.setLevel(logging.WARNING)
        self.service = BlobServiceClient.from_connection_string(azure_connection_string, logger=blob_logger). \
            get_container_client(container)
        self.container_created = True
        hostname = gethostname()
        self.meta = {'hostname': hostname.replace('_', '-'),
                     'process': os.getpid()}
        self.container = (container % self.meta).lower()
        self.meta['hostname'] = hostname
        self.zip_compression = zip_compression
        self.azure_filename = azure_filename

    def put_file_into_storage(self, dirName, fileName):
        """
        Ship the outdated log file to the specified blob container.
        """
        if not self.container_created:
            self.service.create_container(self.container)
            self.container_created = True
        fd, tmpfile_path = None, ''
        try:
            file_path = os.path.join(dirName, fileName)
            if self.zip_compression:
                suffix, content_type = '.zip', 'application/zip'
                fd, tmpfile_path = mkstemp(suffix=suffix)
                with os.fdopen(fd, 'wb') as f:
                    with ZipFile(f, 'w', ZIP_DEFLATED) as z:
                        z.write(file_path, arcname=fileName)
                file_path = tmpfile_path
            else:
                suffix, content_type = '', 'text/plain'
            with open(file_path, "rb") as data:
                self.service.upload_blob(
                    name=self.azure_filename,
                    content_settings=ContentSettings(content_type=content_type),
                    data=data,
                    blob_type=BlobType.AppendBlob)
        finally:
            if self.zip_compression and fd:
                os.remove(tmpfile_path)


class BlobStorageRotatingFileHandler(RotatingFileHandler,
                                     _BlobStorageFileHandler):
    """
    Handler for logging to a file, which switches from one file
    to the next when the current file reaches a certain size.

    The outdated log file is shipped to the specified Azure Storage
    blob container and removed from the local file system immediately.
    """

    def __init__(self,
                 filename,
                 mode='a',
                 maxBytes=0,
                 encoding=None,
                 delay=False,
                 container='logs',
                 zip_compression=False,
                 azure_connection_string="",
                 azure_filename=""):
        meta = {'hostname': gethostname(), 'process': os.getpid()}
        RotatingFileHandler.__init__(self,
                                     filename,
                                     mode=mode,
                                     maxBytes=maxBytes,
                                     backupCount=1,
                                     encoding=encoding,
                                     delay=delay)
        _BlobStorageFileHandler.__init__(self,
                                         azure_connection_string,
                                         container=container,
                                         zip_compression=zip_compression,
                                         azure_filename=azure_filename)

    def doRollover(self):
        """
        Do a rollover, as described in __init__().
        """
        if self.stream:
            self.stream.close()
            self.stream = None
        dfn = "%s.%s" % (self.baseFilename,
                         datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S'))
        if os.path.exists(self.baseFilename):
            os.rename(self.baseFilename, dfn)
            self.put_file_into_storage(*os.path.split(dfn))
            os.remove(dfn)
        if not self.delay:
            self.stream = self._open()
